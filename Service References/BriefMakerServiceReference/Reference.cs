//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Capture.BriefMakerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="BriefMakerServiceReference.IBriefMaker")]
    public interface IBriefMaker {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IBriefMaker/AddDataStreamMomentUsingWCF", ReplyAction="http://Microsoft.ServiceModel.Samples/IBriefMaker/AddDataStreamMomentUsingWCFResp" +
            "onse")]
        void AddDataStreamMomentUsingWCF(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Microsoft.ServiceModel.Samples/IBriefMaker/AddDataStreamMomentUsingWCF", ReplyAction="http://Microsoft.ServiceModel.Samples/IBriefMaker/AddDataStreamMomentUsingWCFResp" +
            "onse")]
        System.IAsyncResult BeginAddDataStreamMomentUsingWCF(byte[] data, System.AsyncCallback callback, object asyncState);
        
        void EndAddDataStreamMomentUsingWCF(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBriefMakerChannel : Capture.BriefMakerServiceReference.IBriefMaker, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BriefMakerClient : System.ServiceModel.ClientBase<Capture.BriefMakerServiceReference.IBriefMaker>, Capture.BriefMakerServiceReference.IBriefMaker {
        
        private BeginOperationDelegate onBeginAddDataStreamMomentUsingWCFDelegate;
        
        private EndOperationDelegate onEndAddDataStreamMomentUsingWCFDelegate;
        
        private System.Threading.SendOrPostCallback onAddDataStreamMomentUsingWCFCompletedDelegate;
        
        public BriefMakerClient() {
        }
        
        public BriefMakerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BriefMakerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BriefMakerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BriefMakerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddDataStreamMomentUsingWCFCompleted;
        
        public void AddDataStreamMomentUsingWCF(byte[] data) {
            base.Channel.AddDataStreamMomentUsingWCF(data);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddDataStreamMomentUsingWCF(byte[] data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDataStreamMomentUsingWCF(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddDataStreamMomentUsingWCF(System.IAsyncResult result) {
            base.Channel.EndAddDataStreamMomentUsingWCF(result);
        }
        
        private System.IAsyncResult OnBeginAddDataStreamMomentUsingWCF(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] data = ((byte[])(inValues[0]));
            return this.BeginAddDataStreamMomentUsingWCF(data, callback, asyncState);
        }
        
        private object[] OnEndAddDataStreamMomentUsingWCF(System.IAsyncResult result) {
            this.EndAddDataStreamMomentUsingWCF(result);
            return null;
        }
        
        private void OnAddDataStreamMomentUsingWCFCompleted(object state) {
            if ((this.AddDataStreamMomentUsingWCFCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDataStreamMomentUsingWCFCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDataStreamMomentUsingWCFAsync(byte[] data) {
            this.AddDataStreamMomentUsingWCFAsync(data, null);
        }
        
        public void AddDataStreamMomentUsingWCFAsync(byte[] data, object userState) {
            if ((this.onBeginAddDataStreamMomentUsingWCFDelegate == null)) {
                this.onBeginAddDataStreamMomentUsingWCFDelegate = new BeginOperationDelegate(this.OnBeginAddDataStreamMomentUsingWCF);
            }
            if ((this.onEndAddDataStreamMomentUsingWCFDelegate == null)) {
                this.onEndAddDataStreamMomentUsingWCFDelegate = new EndOperationDelegate(this.OnEndAddDataStreamMomentUsingWCF);
            }
            if ((this.onAddDataStreamMomentUsingWCFCompletedDelegate == null)) {
                this.onAddDataStreamMomentUsingWCFCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDataStreamMomentUsingWCFCompleted);
            }
            base.InvokeAsync(this.onBeginAddDataStreamMomentUsingWCFDelegate, new object[] {
                        data}, this.onEndAddDataStreamMomentUsingWCFDelegate, this.onAddDataStreamMomentUsingWCFCompletedDelegate, userState);
        }
    }
}
